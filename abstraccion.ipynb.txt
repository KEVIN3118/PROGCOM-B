{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RAfFQsTZkihU"
      },
      "outputs": [],
      "source": [
        "class Saludo:\n",
        "    def saludar(self, nombre):\n",
        "        print(f\"Hola, {nombre}\")\n",
        "\n",
        "s = Saludo()\n",
        "s.saludar(\"Juan\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Numero:\n",
        "    def __init__(self, valor):\n",
        "        self.valor = valor\n",
        "\n",
        "    def es_par(self):\n",
        "        return self.valor % 2 == 0\n",
        "\n",
        "n1 = Numero(4)\n",
        "n2 = Numero(7)\n",
        "print(n1.es_par())  # True\n",
        "print(n2.es_par())  # False"
      ],
      "metadata": {
        "id": "e_8D4S1pl2RM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangulo:\n",
        "    def __init__(self, base, altura):\n",
        "        self.base = base\n",
        "        self.altura = altura\n",
        "\n",
        "    def area(self):\n",
        "        return self.base * self.altura\n",
        "\n",
        "r = Rectangulo(5, 3)\n",
        "print(r.area())  # 15"
      ],
      "metadata": {
        "id": "Spl3_JnBl4Vo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Temperatura:\n",
        "    def __init__(self, celsius):\n",
        "        self.celsius = celsius\n",
        "\n",
        "    def a_fahrenheit(self):\n",
        "        return self.celsius * 1.8 + 32\n",
        "\n",
        "t = Temperatura(25)\n",
        "print(t.a_fahrenheit())  # 77.0"
      ],
      "metadata": {
        "id": "V4aTVFJCl6bi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Palabra:\n",
        "    def __init__(self, texto):\n",
        "        self.texto = texto\n",
        "\n",
        "    def contar_vocales(self):\n",
        "        vocales = \"aeiouAEIOU\"\n",
        "        return sum(1 for letra in self.texto if letra in vocales)\n",
        "\n",
        "p1 = Palabra(\"computadora\")\n",
        "p2 = Palabra(\"Python\")\n",
        "print(p1.contar_vocales())  # 5\n",
        "print(p2.contar_vocales())  # 1"
      ],
      "metadata": {
        "id": "GBgCQhAlmARu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Palindromo:\n",
        "    def __init__(self, palabra):\n",
        "        self.palabra = palabra\n",
        "\n",
        "    def es_palindromo(self):\n",
        "        return self.palabra.lower() == self.palabra[::-1].lower()\n",
        "\n",
        "print(Palindromo(\"reconocer\").es_palindromo())  # True\n",
        "print(Palindromo(\"luz\").es_palindromo())        # False\n",
        "print(Palindromo(\"oso\").es_palindromo())        # True"
      ],
      "metadata": {
        "id": "vt6mzQ31mGH_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "class Dado:\n",
        "    def tirar(self):\n",
        "        return random.randint(1, 6)\n",
        "\n",
        "d = Dado()\n",
        "for _ in range(5):\n",
        "    print(d.tirar())"
      ],
      "metadata": {
        "id": "bm6iHe38mIGW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ListaCuadrados:\n",
        "    def generar(self, n):\n",
        "        return [i**2 for i in range(1, n+1)]\n",
        "\n",
        "l = ListaCuadrados()\n",
        "print(l.generar(5))  # [1, 4, 9, 16, 25]"
      ],
      "metadata": {
        "id": "vxhgG6a_mP7x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Calculadora:\n",
        "    def operar(self, a, b, tipo):\n",
        "        if tipo == \"suma\":\n",
        "            return a + b\n",
        "        elif tipo == \"resta\":\n",
        "            return a - b\n",
        "        elif tipo == \"multiplicacion\":\n",
        "            return a * b\n",
        "        elif tipo == \"division\":\n",
        "            return a / b\n",
        "        else:\n",
        "            return \"Operaci칩n no v치lida\"\n",
        "\n",
        "calc = Calculadora()\n",
        "print(calc.operar(10, 5, \"suma\"))           # 15\n",
        "print(calc.operar(10, 5, \"division\"))       # 2.0"
      ],
      "metadata": {
        "id": "rxkaMxC2mSZM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class GeneradorContrasena:\n",
        "    def crear(self, nombre, a침o):\n",
        "        return f\"{nombre}{a침o}@\"\n",
        "\n",
        "g = GeneradorContrasena()\n",
        "print(g.crear(\"Luis\", 2025))  # Luis2025@"
      ],
      "metadata": {
        "id": "E5tHbNXXmUW0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}